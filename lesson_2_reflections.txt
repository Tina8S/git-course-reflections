What happens when you initialize a repository? Why do you need to do it?

Without initialization the "repository" isn't a repository at all but a normal directory. In order to become a repository metadata is needed. This is stored in a directory ".git" which is created by initializing the repository via the command "git init".

How is the staging area different from the working directory and the repository?
What value do you think it offers?

As opposed to the working directory the staging area contains only those files that I consider to belong to the next commit. I can thus separate these files from other files that might contain changes but that I don't want to put into the next commit (but rather a later one). The staging area offers me better control over what changes I want to commit without keeping me from making changes to unrelated files that should not make it into the next commit.

How can you use the staging area to make sure you have one commit per logical change?

The staging area allows you to separate the files that contain the logical change you want to commit from the files of which the changes are unrelated to the logical change you want to be in the commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are helpful when trying out new things that might or might not end up in the finished version of the project.

How do the diagrams help you visualize the branch structure?

The diagrams show which commits belong to a certain branch. They also show which commits different branches have in common and which commits are unreachable from whithin certain branches. Overall the diagram shows the entire work that's been done on the project and helps planning for merges.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When merging two branches (or one branch into another) two (or more) branches become one branch again. The lable of the branch one was in when executing the merge stays the label of the merged branch.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

When merging a lot of the changes of the two branches might be unrelated and easily merged. Having git do this work is obviously a time saver. Also, git can do it without putting in new mistakes. However, there might be cases where Git's heuristics for doing the merge might be in error. Finding these errors later might cost time and effort, too.
