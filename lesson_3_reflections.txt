When would you want to use a remote repository rather than keeping all your work
local?

Just by itself it's a way to keep a remote backup and also comes in handy when
working from different computers a lot. It's most useful though when
collaborating with others, I assume.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date
with your remote repository?

Because I want to stay in control of what I see when I
type "git log"? It might get confusing when I am working
on somthing and suddenly other commits pop up.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

A clone is a local copy of a repository. It's likely what I work on when I make changes. A Fork is similar to a clone in the sense that it contains the same data as another repository but the term is used to describe the cloning of a repository on the GitHub server (or maybe also GitLab). It's used to continue ones own work based on the project of someone else but possibly veering of into a different direction. Branches exist only within one repository. They also contain changes to a preexisting project that might or might not be incorporated into the main branch (master). The difference betwenn Forks and Branches is that Branches are designed to be merged back into master or another branch in the same project whereas Forks are split of off the original project without any plans to later merge them again.

What is the benefit of having a copy of the last known state of the remote stored locally?

To see what changes were made locally since last push. To see what changes were made on the remote since last pull. It's also still possible at this point to create a new branch for the local changes based on the last commit that was pulled (as opposed to the last commit that exists remotely).

How would you collaborate without using Git or GitHub?  What would be easier, and what would be harder?

We'd probably create a lot of copies of files with different names then meet regularly to see which version of the files (or which portions of those files) we'd like to incorporate into the production code. It'd be a lot harder to keep track of who did what and based on which original version though. The only downside to using git is the learning curve each of us would have to take in order to use it properly. And maybe, since creating branches (and forks etc.) is so easy, it might also lead to more experimenting than neccessary.

When would you want to make changes in a separate branch rather than directly in master?  What benefits does each approach have?

This kind of workflow is most useful when colaborating with others as it allows for "pull requests". Pull requests are a great tool to directly interact with other project members in order to incorporate a feature I programmed into the master branch.
